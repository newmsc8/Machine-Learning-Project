df <- data.frame()
df$A<-1:10
df <- 1:10
df$A<-1:10
df$B<-1:10
df$C<-1:10
df
df <- data.frame()
df
df<-[10,3]
df
df <- data.frame(matrix(ncol = 3, nrow = 10))
names(df)<-c("A","B","C")
df$A<-1:10
df$B<-1:10
df$C<-1:10
df
df2 <- data.frame(matrix(ncol = 3, nrow = 10))
names(df2)<-c("C","E","F")
df2 <- data.frame(matrix(ncol = 3, nrow = 5))
names(df2)<-c("C","E","F")
df2$C<-1:5
df2$E<-1:5
df2$F<-1:5
df2
df2$C<-6:10
df2
merge(df,df2,by="C")
df2$C<-16:20
merge(df,df2,by="C")
merge(df,df2,by="C", all=TRUE)
df2$C<-10:15
df2$C<-10:14
merge(df,df2,by="C", all=TRUE)
df<-data(iris)
df[1:10,]
df
data(iris)
iris
df<-iris
df[1:10,]
df<-df[1:10,]
df$NEW<-'low'
df
df[df$Petal.Width > 0.1,]$NEW<-'med'
df
df<-data(iris)
df
df<-iris
df
formula=Species~.
library(ada)
load.packages(ada)
load.packages("ada")
install.pacakges("ada")
install.packages("ada")
library(ada)
model=ada(formula=formula,data=df)
model=naiveBayes(formula=formula,data=df)
install.packages("naiveBayes")
install.packages("e1071")
library(e1071)
model=naiveBayes(formula=formula,data=df)
model
p=predict(model,df)
p
model.s<-svm(formula,df)
p.s<-predict(model.s,df)
p.s
df<-iris
library(rpart)
tree.model=rpart(formula("Species~."),df,control=rpart.control(cp=0.01))
tree.p=predict(model,newdata=df)
tree.p=predict(tree.model,newdata=df)
tree.p
tree.p$prediction<-max(df)
tree.model=rpart(formula("Species~."),df)
tree.p
predict(tree.model,newdata=df)
predict(tree.model,newdata=df,type='class')
nb.model=naiveBayes(formula=formula("Species~."),data=df)
libary(e1071)
library(e1071)
nb.model=naiveBayes(formula=formula("Species~."),data=df)
predict(nb.model,newdata=df,type='class')
svm.model=svm(formula=formula("Species~."),data=df)
predict(svm.model,newdata=df,type='class')
df.chf<-read.csv("../chf_readmit_cost.csv")
df.small<-df.chf[1:20,]
df$RiskCost<-(df$CostLabel)+df$RiskLabel
df$CostLabel
df
df.small
df.small$RiskCost<-(df.small$CostLabel)+df.small$RiskLabel
df.small$RiskCost<-paste(df.small$CostLabel,df.small$RiskLabel)
df.small$RiskCost
colnames(df.chf)
p.tree
tree.p
p.svm=predict(svm.model,newdata=df,type='class')
p.svm
ret=cbind(df$Species,p.svm)
ret
correct=ret[ret[,1]==ret[,2],]
df.chf
p.svm
p.svm2=predict(svm.model,newdata=df,type='class')
rbind(p.svm,p.svm2)
df.small
df.chf$CostLabel
df.chf$RiskLabel
df.small$CostRisk
df.small$RiskCost
model.type<-nb
model.type<-'nb'
response<-'CostLabel'
k=10
ret=data.frame()
df<-df.chf
df$VisitLink<-NULL
if(response == "RiskLabel") {#
	df$CostLabel<-NULL#
	formula = formula("RiskLabel~.")#
} else if(response == "CostLabel") {#
	df$RiskLabel<-NULL#
	formula = formula("CostLabel~.")#
} else {#
	df$RiskCost<-paste(df$CostLabel,df$RiskLabel)#
	df$CostLabel<-NULL#
	df$RiskLabel<-NULL#
	formula = formula("RiskCost~.")#
}
df.shuffle = df[1:nrow(df),]
i=1
cur<-vector()#
#
	#separate train and test data#
	df.train = df.shuffle[which(1:nrow(df.shuffle)%%k != i%%k),]#
	df.test = df.shuffle[which(1:nrow(df.shuffle)%%k == i%%k),]#
#
	#train model#
	model = switch(model.type,#
		tree = rpart(formula, df.train, control=rpart.control(cp=cp)),#
		svm = svm(formula=formula, data=df.train),#
		nb = naiveBayes(formula, data=df.train))#
	#use model to predict values for test data#
	p = switch(model.type,#
		tree = predict(model, newdata=df.test,type='class'),#
		svm = predict(model, newdata=df.test,type='class'),#
		nb = predict(model, newdata=df.test),type='class')#
#
	#results matrix has actual values in column 1 and predicted values in column 2#
	cur = cbind(df.test$response, p)#
	ret = rbind(ret, cur)
ret
df.test
response
df.test$response
cur<-vector()#
#
	#separate train and test data#
	df.train = df.shuffle[which(1:nrow(df.shuffle)%%k != i%%k),]#
	df.test = df.shuffle[which(1:nrow(df.shuffle)%%k == i%%k),]#
#
	#train model#
	model = switch(model.type,#
		tree = rpart(formula, df.train, control=rpart.control(cp=cp)),#
		svm = svm(formula=formula, data=df.train),#
		nb = naiveBayes(formula, data=df.train))#
	#use model to predict values for test data#
	p = switch(model.type,#
		tree = predict(model, newdata=df.test,type='class'),#
		svm = predict(model, newdata=df.test,type='class'),#
		nb = predict(model, newdata=df.test),type='class')#
#
	#results matrix has actual values in column 1 and predicted values in column 2#
	if(response == "RiskLabel") {#
		cur = cbind(df.test$RiskLabel, p)#
	} else if(response == "CostLabel") {#
		cur = cbind(df.test$CostLabel, p)#
	} else {#
		cur = cbind(df.test$RiskCost, p)#
	}#
	ret = rbind(ret, cur)
rm(ret)
cur<-vector()#
#
	#separate train and test data#
	df.train = df.shuffle[which(1:nrow(df.shuffle)%%k != i%%k),]#
	df.test = df.shuffle[which(1:nrow(df.shuffle)%%k == i%%k),]#
#
	#train model#
	model = switch(model.type,#
		tree = rpart(formula, df.train, control=rpart.control(cp=cp)),#
		svm = svm(formula=formula, data=df.train),#
		nb = naiveBayes(formula, data=df.train))#
	#use model to predict values for test data#
	p = switch(model.type,#
		tree = predict(model, newdata=df.test,type='class'),#
		svm = predict(model, newdata=df.test,type='class'),#
		nb = predict(model, newdata=df.test),type='class')#
#
	#results matrix has actual values in column 1 and predicted values in column 2#
	if(response == "RiskLabel") {#
		cur = cbind(df.test$RiskLabel, p)#
	} else if(response == "CostLabel") {#
		cur = cbind(df.test$CostLabel, p)#
	} else {#
		cur = cbind(df.test$RiskCost, p)#
	}#
	ret = rbind(ret, cur)
ret<-data.frame()
cur<-vector()#
#
	#separate train and test data#
	df.train = df.shuffle[which(1:nrow(df.shuffle)%%k != i%%k),]#
	df.test = df.shuffle[which(1:nrow(df.shuffle)%%k == i%%k),]#
#
	#train model#
	model = switch(model.type,#
		tree = rpart(formula, df.train, control=rpart.control(cp=cp)),#
		svm = svm(formula=formula, data=df.train),#
		nb = naiveBayes(formula, data=df.train))#
	#use model to predict values for test data#
	p = switch(model.type,#
		tree = predict(model, newdata=df.test,type='class'),#
		svm = predict(model, newdata=df.test,type='class'),#
		nb = predict(model, newdata=df.test),type='class')#
#
	#results matrix has actual values in column 1 and predicted values in column 2#
	if(response == "RiskLabel") {#
		cur = cbind(df.test$RiskLabel, p)#
	} else if(response == "CostLabel") {#
		cur = cbind(df.test$CostLabel, p)#
	} else {#
		cur = cbind(df.test$RiskCost, p)#
	}#
	ret = rbind(ret, cur)
ret
#the total number of people predicted correctly by the model#
correct=ret[ret[,1]==ret[,2],]#
#the accuracy = (total number predicted correctly)/(total number in file)#
message('accuracy: ', nrow(correct)/nrow(df.shuffle))
#calculate the precision of each class#
totalp = 0 #running precision total#
numc = 3 #stores the number of classes (used in average)#
if((response==RiskLabel)||(response==CostLabel)) {#
	predict = ret[ret[,2]==1,]#
	true = predict[predict[,1]==1,]#
	#precision of class 1#
	message('precision 1: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = ret[ret[,2]==2,]#
	true = predict[predict[,1]==2,]#
	#precision of class 2#
	message('precision 2: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = ret[ret[,2]==3,]#
	true = predict[predict[,1]==3,]#
	#precision of class 3#
	message('precision 3: ',true/predict)#
	totalp = totalp+(true/predict)#
} else {#
	for(i in 1:9) {#
		#for LP create loop#
		predict = ret[ret[,2]==i,]#
		true = predict[predict[,1]==i,]#
		message('precision ',i, ': ',true/predict)#
		totalp = totalp+(true/predict)#
	}#
	numc=9#
}#
#report average precision#
message('average precision: ',totalp/numc)
#calculate the precision of each class#
totalp = 0 #running precision total#
numc = 3 #stores the number of classes (used in average)#
if((response=='RiskLabel')||(response=='CostLabel')) {#
	predict = ret[ret[,2]==1,]#
	true = predict[predict[,1]==1,]#
	#precision of class 1#
	message('precision 1: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = ret[ret[,2]==2,]#
	true = predict[predict[,1]==2,]#
	#precision of class 2#
	message('precision 2: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = ret[ret[,2]==3,]#
	true = predict[predict[,1]==3,]#
	#precision of class 3#
	message('precision 3: ',true/predict)#
	totalp = totalp+(true/predict)#
} else {#
	for(i in 1:9) {#
		#for LP create loop#
		predict = ret[ret[,2]==i,]#
		true = predict[predict[,1]==i,]#
		message('precision ',i, ': ',true/predict)#
		totalp = totalp+(true/predict)#
	}#
	numc=9#
}#
#report average precision#
message('average precision: ',totalp/numc)
#calculate the precision of each class#
totalp = 0 #running precision total#
numc = 3 #stores the number of classes (used in average)#
if((response=='RiskLabel')||(response=='CostLabel')) {#
	predict = nrow(ret[ret[,2]==1,])#
	true = nrow(predict[predict[,1]==1,])#
	#precision of class 1#
	message('precision 1: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = nrow(ret[ret[,2]==2,])#
	true = nrow(predict[predict[,1]==2,])#
	#precision of class 2#
	message('precision 2: ',true/predict)#
	totalp = totalp+(true/predict)#
	predict = nrow(ret[ret[,2]==3,])#
	true = nrow(predict[predict[,1]==3,])#
	#precision of class 3#
	message('precision 3: ',true/predict)#
	totalp = totalp+(true/predict)#
} else {#
	for(i in 1:9) {#
		#for LP create loop#
		predict = nrow(ret[ret[,2]==i,])#
		true = nrow(predict[predict[,1]==i,])#
		message('precision ',i, ': ',true/predict)#
		totalp = totalp+(true/predict)#
	}#
	numc=9#
}#
#report average precision#
message('average precision: ',totalp/numc)
#calculate the precision of each class#
totalp = 0 #running precision total#
numc = 3 #stores the number of classes (used in average)#
if((response=='RiskLabel')||(response=='CostLabel')) {#
	predict = ret[ret[,2]==1,]#
	true = predict[predict[,1]==1,]#
	#precision of class 1#
	message('precision 1: ',nrow(true)/nrow(predict))#
	totalp = totalp+(nrow(true)/nrow(predict))#
	predict = ret[ret[,2]==2,]#
	true = predict[predict[,1]==2,]#
	#precision of class 2#
	message('precision 2: ',nrow(true)/nrow(predict))#
	totalp = totalp+(nrow(true)/nrow(predict))#
	predict = ret[ret[,2]==3,]#
	true = predict[predict[,1]==3,]#
	#precision of class 3#
	message('precision 3: ',nrow(true)/nrow(predict))#
	totalp = totalp+(nrow(true)/nrow(predict))#
} else {#
	for(i in 1:9) {#
		#for LP create loop#
		predict = ret[ret[,2]==i,]#
		true = predict[predict[,1]==i,]#
		message('precision ',i, ': ',nrow(true)/nrow(predict))#
		totalp = totalp+(nrow(true)/nrow(predict))#
	}#
	numc=9#
}#
#report average precision#
message('average precision: ',totalp/numc)
ret
ret[ret[,2]==3,]
ret[ret[,1]==3,]
#running recall total#
totalr = 0#
if((response=='RiskLabel')||(response=='CostLabel')) {#
	actual = ret[ret[,1]==1,]#
	true = actual[actual[,2]==1,]#
	#recall of class 1#
	message('recall 1: ',nrow(true)/nrow(actual))#
	totalr = totalr+(nrow(true)/nrow(actual))#
	actual = ret[ret[,1]==2,]#
	true = actual[actual[,2]==2,]#
	#recall of class 2#
	message('recall 2: ',nrow(true)/nrow(actual))#
	totalr = totalr+(nrow(true)/nrow(actual))#
	actual = ret[ret[,1]==3,]#
	true = actual[actual[,2]==3,]#
	#recall of class 3#
	message('precision 3: ',nrow(true)/nrow(actual))#
	totalr = totalr+(nrow(true)/nrow(actual))#
} else {#
	for(i in 1:9) {#
		#for LP create loop#
		actual = ret[ret[,1]==i,]#
		true = actual[actual[,2]==i,]#
		message('precision ',i, ': ',nrow(true)/nrow(actual))#
		totalr = totalr+(nrow(true)/nrow(actual))#
	}#
}#
#report average recall#
message('average recall: ',totalr/numc)
#report F1 measure using average recall and precision#
message('f-measure: ',(2*(totalp/numc)*(totalr/numc))/((totalp/numc)+(totalr/numc)))#
#
#report counts so we can identify who 1,2,3(,4,5,6,7,8,9) are#
message('figure out who is who: ')#
if(response=='CostLabel') {#
	message('number low: ',nrow(df.shuffle[df.shuffle$CostLabel=='low',]))#
	message('number medium: ',nrow(df.shuffle[df.shuffle$CostLabel=='medium',]))#
	message('number high: ',nrow(df.shuffle[df.shuffle$CostLabel=='high',]))#
	message('number 1: ',nrow(ret[ret[,1]==1,]))#
	message('number 2: ',nrow(ret[ret[,1]==2,]))#
	message('number 3: ',nrow(ret[ret[,1]==3,]))#
} else if(response=='RiskLabel') {#
	message('number 30days: ',nrow(df.shuffle[df.shuffle$CostLabel=='30days',]))#
	message('number 60days: ',nrow(df.shuffle[df.shuffle$CostLabel=='60days',]))#
	message('number 90days: ',nrow(df.shuffle[df.shuffle$CostLabel=='90days',]))#
	message('number 1: ',nrow(ret[ret[,1]==1,]))#
	message('number 2: ',nrow(ret[ret[,1]==2,]))#
	message('number 3: ',nrow(ret[ret[,1]==3,]))#
} else {#
	message('number low 30days: ',nrow(df.shuffle[df.shuffle$CostLabel=='low 30days',]))#
	message('number low 60days: ',nrow(df.shuffle[df.shuffle$CostLabel=='low 60days',]))#
	message('number low 90days: ',nrow(df.shuffle[df.shuffle$CostLabel=='low 90days',]))#
	message('number medium 30days: ',nrow(df.shuffle[df.shuffle$CostLabel=='medium 30days',]))#
	message('number medium 60days: ',nrow(df.shuffle[df.shuffle$CostLabel=='medium 60days',]))#
	message('number medium 90days: ',nrow(df.shuffle[df.shuffle$CostLabel=='medium 90days',]))#
	message('number high 30days: ',nrow(df.shuffle[df.shuffle$CostLabel=='high 30days',]))#
	message('number high 60days: ',nrow(df.shuffle[df.shuffle$CostLabel=='high 60days',]))#
	message('number high 90days: ',nrow(df.shuffle[df.shuffle$CostLabel=='high 90days',]))#
	message('number 1: ',nrow(ret[ret[,1]==1,]))#
	message('number 2: ',nrow(ret[ret[,1]==2,]))#
	message('number 3: ',nrow(ret[ret[,1]==3,]))#
	message('number 4: ',nrow(ret[ret[,1]==4,]))#
	message('number 5: ',nrow(ret[ret[,1]==5,]))#
	message('number 6: ',nrow(ret[ret[,1]==6,]))#
	message('number 7: ',nrow(ret[ret[,1]==7,]))#
	message('number 8: ',nrow(ret[ret[,1]==8,]))#
	message('number 9: ',nrow(ret[ret[,1]==9,]))#
}
